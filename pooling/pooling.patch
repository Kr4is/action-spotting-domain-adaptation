diff --git a/Benchmarks/Pooling/src/dataset.py b/Benchmarks/Pooling/src/dataset.py
index f63a25c..021681d 100644
--- a/Benchmarks/Pooling/src/dataset.py
+++ b/Benchmarks/Pooling/src/dataset.py
@@ -19,7 +19,7 @@ from SoccerNet.Downloader import getListGames
 from SoccerNet.Downloader import SoccerNetDownloader
 from SoccerNet.Evaluation.utils import AverageMeter, EVENT_DICTIONARY_V2, INVERSE_EVENT_DICTIONARY_V2
 from SoccerNet.Evaluation.utils import EVENT_DICTIONARY_V1, INVERSE_EVENT_DICTIONARY_V1
-
+from SoccerNet.Evaluation.ActionSpotting import inferListGame
 
 
 def feats2clip(feats, stride, clip_length, padding = "replicate_last", off=0):
@@ -73,7 +73,7 @@ class SoccerNetClips(Dataset):
     def __init__(self, path, features="ResNET_PCA512.npy", split=["train"], version=1, 
                 framerate=2, chunk_size=240):
         self.path = path
-        self.listGames = getListGames(split)
+        self.listGames = inferListGame(path)
         self.features = features
         self.chunk_size = chunk_size
         self.version = version
@@ -86,8 +86,8 @@ class SoccerNetClips(Dataset):
             self.labels="Labels-v2.json"
 
         logging.info("Checking/Download features and labels locally")
-        downloader = SoccerNetDownloader(path)
-        downloader.downloadGames(files=[self.labels, f"1_{self.features}", f"2_{self.features}"], split=split, verbose=False)
+        # downloader = SoccerNetDownloader(path)
+        # downloader.downloadGames(files=[self.labels, f"1_{self.features}", f"2_{self.features}"], split=split, verbose=False)
 
 
         logging.info("Pre-compute clips")
@@ -181,7 +181,7 @@ class SoccerNetClipsTesting(Dataset):
     def __init__(self, path, features="ResNET_PCA512.npy", split=["test"], version=1, 
                 framerate=2, chunk_size=240):
         self.path = path
-        self.listGames = getListGames(split)
+        self.listGames = inferListGame(path)
         self.features = features
         self.chunk_size = chunk_size
         self.framerate = framerate
@@ -197,12 +197,12 @@ class SoccerNetClipsTesting(Dataset):
             self.labels="Labels-v2.json"
 
         logging.info("Checking/Download features and labels locally")
-        downloader = SoccerNetDownloader(path)
-        for s in split:
-            if s == "challenge":
-                downloader.downloadGames(files=[f"1_{self.features}", f"2_{self.features}"], split=[s], verbose=False)
-            else:
-                downloader.downloadGames(files=[self.labels, f"1_{self.features}", f"2_{self.features}"], split=[s], verbose=False)
+        # downloader = SoccerNetDownloader(path)
+        # for s in split:
+        #     if s == "challenge":
+        #         downloader.downloadGames(files=[f"1_{self.features}", f"2_{self.features}"], split=[s], verbose=False)
+        #     else:
+        #         downloader.downloadGames(files=[self.labels, f"1_{self.features}", f"2_{self.features}"], split=[s], verbose=False)
 
 
     def __getitem__(self, index):
diff --git a/Benchmarks/Pooling/src/main.py b/Benchmarks/Pooling/src/main.py
index 0b41e8e..9c37292 100644
--- a/Benchmarks/Pooling/src/main.py
+++ b/Benchmarks/Pooling/src/main.py
@@ -88,24 +88,25 @@ def main(args):
             batch_size=1, shuffle=False,
             num_workers=1, pin_memory=True)
 
-        results = testSpotting(test_loader, model=model, model_name=args.model_name, NMS_window=args.NMS_window, NMS_threshold=args.NMS_threshold)
-        if results is None:
-            continue
-
-        a_mAP = results["a_mAP"]
-        a_mAP_per_class = results["a_mAP_per_class"]
-        a_mAP_visible = results["a_mAP_visible"]
-        a_mAP_per_class_visible = results["a_mAP_per_class_visible"]
-        a_mAP_unshown = results["a_mAP_unshown"]
-        a_mAP_per_class_unshown = results["a_mAP_per_class_unshown"]
-
-        logging.info("Best Performance at end of training ")
-        logging.info("a_mAP visibility all: " +  str(a_mAP))
-        logging.info("a_mAP visibility all per class: " +  str( a_mAP_per_class))
-        logging.info("a_mAP visibility visible: " +  str( a_mAP_visible))
-        logging.info("a_mAP visibility visible per class: " +  str( a_mAP_per_class_visible))
-        logging.info("a_mAP visibility unshown: " +  str( a_mAP_unshown))
-        logging.info("a_mAP visibility unshown per class: " +  str( a_mAP_per_class_unshown))
+        for metric in ['loose', 'tight']:
+            results = testSpotting(test_loader, model=model, model_name=args.model_name, NMS_window=args.NMS_window, NMS_threshold=args.NMS_threshold, metric=metric)
+            if results is None:
+                continue
+
+            a_mAP = results["a_mAP"]
+            a_mAP_per_class = results["a_mAP_per_class"]
+            a_mAP_visible = results["a_mAP_visible"]
+            a_mAP_per_class_visible = results["a_mAP_per_class_visible"]
+            a_mAP_unshown = results["a_mAP_unshown"]
+            a_mAP_per_class_unshown = results["a_mAP_per_class_unshown"]
+
+            logging.info("Best Performance at end of training ")
+            logging.info("a_mAP visibility all: " +  str(a_mAP))
+            logging.info("a_mAP visibility all per class: " +  str( a_mAP_per_class))
+            logging.info("a_mAP visibility visible: " +  str( a_mAP_visible))
+            logging.info("a_mAP visibility visible per class: " +  str( a_mAP_per_class_visible))
+            logging.info("a_mAP visibility unshown: " +  str( a_mAP_unshown))
+            logging.info("a_mAP visibility unshown per class: " +  str( a_mAP_per_class_unshown))
 
     return
 
diff --git a/Benchmarks/Pooling/src/train.py b/Benchmarks/Pooling/src/train.py
index 1c8339a..c791fd7 100644
--- a/Benchmarks/Pooling/src/train.py
+++ b/Benchmarks/Pooling/src/train.py
@@ -11,6 +11,7 @@ import numpy as np
 import sklearn
 import sklearn.metrics
 from sklearn.metrics import average_precision_score
+from tabulate import tabulate
 from SoccerNet.Evaluation.ActionSpotting import evaluate
 from SoccerNet.Evaluation.utils import AverageMeter, EVENT_DICTIONARY_V2, INVERSE_EVENT_DICTIONARY_V2
 from SoccerNet.Evaluation.utils import EVENT_DICTIONARY_V1, INVERSE_EVENT_DICTIONARY_V1
@@ -193,7 +194,7 @@ def test(dataloader, model, model_name):
 
     return mAP
 
-def testSpotting(dataloader, model, model_name, overwrite=True, NMS_window=30, NMS_threshold=0.5):
+def testSpotting(dataloader, model, model_name, overwrite=True, NMS_window=30, NMS_threshold=0.5, metric='loose'):
 
     split = '_'.join(dataloader.dataset.split)
     # print(split)
@@ -357,11 +358,32 @@ def testSpotting(dataloader, model, model_name, overwrite=True, NMS_window=30, N
         return None
 
     results = evaluate(SoccerNet_path=dataloader.dataset.path, 
+                 dataset = None,
                  Predictions_path=output_results,
                  split="test",
                  prediction_file="results_spotting.json", 
-                 version=dataloader.dataset.version)    
-
+                 version=dataloader.dataset.version,
+                 metric=metric,
+                 EVENT_DICTIONARY=EVENT_DICTIONARY_V2)    
+
+    rows = []
+    for i in range(len(results['a_mAP_per_class'])):
+        label = INVERSE_EVENT_DICTIONARY_V2[i]
+        rows.append((
+            label,
+            '{:0.2f}'.format(results['a_mAP_per_class'][i] * 100),
+            '{:0.2f}'.format(results['a_mAP_per_class_visible'][i] * 100),
+            '{:0.2f}'.format(results['a_mAP_per_class_unshown'][i] * 100)
+        ))
+    rows.append((
+        'Average mAP',
+        '{:0.2f}'.format(results['a_mAP'] * 100),
+        '{:0.2f}'.format(results['a_mAP_visible'] * 100),
+        '{:0.2f}'.format(results['a_mAP_unshown'] * 100)
+    ))
+
+    print('Metric:', metric)
+    print(tabulate(rows, headers=['', 'Any', 'Visible', 'Unseen']))
     
     return results
 
diff --git a/Features/ExtractResNET_TF2.py b/Features/ExtractResNET_TF2.py
index c7fe5c0..20cd1ae 100644
--- a/Features/ExtractResNET_TF2.py
+++ b/Features/ExtractResNET_TF2.py
@@ -30,6 +30,13 @@ from SoccerNet.utils import getListGames
 from SoccerNet.Downloader import SoccerNetDownloader
 from SoccerNet.DataLoader import Frame, FrameCV
 
+def inferListGame(SoccerNet_path): 
+    list_games = []
+    for root, dirs, files in os.walk(SoccerNet_path):
+        for file in files:
+            if file.endswith(".json"):
+                list_games.append(os.path.relpath(root, SoccerNet_path))
+    return list_games
 
 class FeatureExtractor():
     def __init__(self, rootFolder,
@@ -74,7 +81,7 @@ class FeatureExtractor():
             self.model.trainable = False
 
     def extractAllGames(self):
-        list_game = getListGames(self.split)
+        list_game = inferListGame(self.rootFolder)
         for i_game, game in enumerate(tqdm(list_game)):
             try:
                 self.extractGameIndex(i_game)
@@ -82,27 +89,28 @@ class FeatureExtractor():
                 print(f"issue with game {i_game}, {game}")
 
     def extractGameIndex(self, index):
-        print(getListGames(self.split)[index])
+        game = inferListGame(self.rootFolder)[index]
+        print(game)
         if self.video =="224p":
             for vid in ["1_224p.mkv","2_224p.mkv"]:
-                self.extract(video_path=os.path.join(self.rootFolder, getListGames(self.split)[index], vid))
+                self.extract(video_path=os.path.join(self.rootFolder, game, vid))
                 
         elif self.video =="LQ":
             for vid in ["1.mkv","2.mkv"]:
-                self.extract(video_path=os.path.join(self.rootFolder, getListGames(self.split)[index], vid))
+                self.extract(video_path=os.path.join(self.rootFolder, game, vid))
 
         elif self.video == "HQ":
             
             # read config for raw HD video
             config = configparser.ConfigParser()
-            if not os.path.exists(os.path.join(self.rootFolder, getListGames(self.split)[index], "video.ini")) and self.tmp_HQ_videos is not None:
+            if not os.path.exists(os.path.join(self.rootFolder, game, "video.ini")) and self.tmp_HQ_videos is not None:
                 self.mySoccerNetDownloader.downloadVideoHD(
-                    game=getListGames(self.split)[index], file="video.ini")
-            config.read(os.path.join(self.rootFolder, getListGames(self.split)[index], "video.ini"))
+                    game=game, file="video.ini")
+            config.read(os.path.join(self.rootFolder, game, "video.ini"))
 
             # lopp over videos
             for vid in config.sections():
-                video_path = os.path.join(self.rootFolder, getListGames(self.split)[index], vid)
+                video_path = os.path.join(self.rootFolder, game, vid)
 
                 # cehck if already exists, then skip
                 feature_path = video_path[:-4] + f"_{self.feature}_{self.back_end}.npy"
@@ -114,7 +122,7 @@ class FeatureExtractor():
                 remove_afterwards = False
                 if not os.path.exists(video_path) and self.tmp_HQ_videos is not None:
                     remove_afterwards = True
-                    self.mySoccerNetDownloader.downloadVideoHD(game=getListGames(self.split)[index], file=vid)
+                    self.mySoccerNetDownloader.downloadVideoHD(game=game, file=vid)
 
                 # extract feature for video
                 self.extract(video_path=video_path,
diff --git a/Features/ReduceFeaturesPCA.py b/Features/ReduceFeaturesPCA.py
index e66e893..e793ebe 100644
--- a/Features/ReduceFeaturesPCA.py
+++ b/Features/ReduceFeaturesPCA.py
@@ -11,14 +11,21 @@ import pickle as pkl
 
 from tqdm import tqdm
 
-
+def inferListGame(SoccerNet_path): 
+    list_games = []
+    for root, dirs, files in os.walk(SoccerNet_path):
+        for file in files:
+            if file.endswith(".json"):
+                list_games.append(os.path.relpath(root, SoccerNet_path))
+    return list_games
 
 def main(args):
 
     if not os.path.exists(args.pca_file) or not os.path.exists(args.scaler_file):
             
         PCAdata = []
-        for game in tqdm(getListGames("v1")):
+        for game in tqdm(inferListGame(args.soccernet_dirpath)):
+            print(game)
 
             half1 = np.load(os.path.join(args.soccernet_dirpath, game, "1_"+args.features))
             PCAdata.append(half1)
@@ -58,7 +65,7 @@ def main(args):
 
 
     # loop over games in v1
-    for game in tqdm(getListGames(["v1"])):
+    for game in tqdm(inferListGame(args.soccernet_dirpath)):
         for half in [1,2]:
             game_feat = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features}")
             game_feat_pca = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features_PCA}")
@@ -72,21 +79,21 @@ def main(args):
                 print(f"{game_feat_pca} already exists")
 
 
-    for game in tqdm(getListGames(["challenge"])):
-        for half in [1,2]:
-            game_feat = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features}")
-            game_feat_pca = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features_PCA}")
-            if not os.path.exists(game_feat_pca) or args.overwrite:
-                feat = np.load(game_feat)
+    # for game in tqdm(getListGames(["challenge"])):
+    #     for half in [1,2]:
+    #         game_feat = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features}")
+    #         game_feat_pca = os.path.join(args.soccernet_dirpath, game, f"{half}_{args.features_PCA}")
+    #         if not os.path.exists(game_feat_pca) or args.overwrite:
+    #             feat = np.load(game_feat)
                 
-                feat = feat - average
+    #             feat = feat - average
                 
-                feat_reduced = pca.transform(feat)
+    #             feat_reduced = pca.transform(feat)
 
-                np.save(game_feat_pca, feat_reduced)
+    #             np.save(game_feat_pca, feat_reduced)
 
-            else:
-                print(f"{game_feat_pca} already exists")
+    #         else:
+    #             print(f"{game_feat_pca} already exists")
 
 if __name__ == "__main__":
     # Argument parser
